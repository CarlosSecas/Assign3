     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Heron's Triangles".  This program calculates the area of a triangle using Heron's formula.                   *
     3                                  ; Copyright (C) 2025  Carlos Secas .          *
     4                                  ;                                                                                                                           *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be useful,   *
     7                                  ;but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See   *
     8                                  ;the GNU General Public License for more details A copy of the GNU General Public License v3 is available here:             *
     9                                  ;<https://www.gnu.org/licenses/>.                                                                                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  
    15                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    16                                  ;Author information
    17                                  ;  Author name: Carlos Secas
    18                                  ;  Author email: carlosJsecas@csu.fullerton.edu
    19                                  ;  CWID: 886088269
    20                                  ;  Class: 240-09 Section 09
    21                                  ;
    22                                  ;Program information
    23                                  ;  Program name: Heron's Triangles
    24                                  ;  Programming languages: One module in C, four in X86 Assembly, and one in Bash.
    25                                  ;  Date program began: 2025-Mar-06
    26                                  ;  Date of last update: 2025-Mar-09
    27                                  ;  Files in this program: triangle.c, manager.asm, istriangle.asm, huron.asm, isfloat.asm, triangle.inc, r.sh
    28                                  ;  Testing: Alpha testing completed.  All functions are correct.
    29                                  ;  Status: Ready for release to customers
    30                                  ;
    31                                  ;Purpose
    32                                  ;   This program calculates the area of a triangle given three side lengths using Heron's formula.
    33                                  ;   It validates input, ensures the sides form a triangle, and computes the area accordingly.
    34                                  ;
    35                                  ;Devlopment
    36                                  ;  This assembly code was developed using NASM in a Linux-based enviorment within Github Codespaces,
    37                                  ;  accessed remotely from a Windows 10 system.  
    38                                  ;
    39                                  ;This file:
    40                                  ;  File name: manager.asm
    41                                  ;  Language: X86-64
    42                                  ;  Max page width: 124 columns
    43                                  ;  Assemble (standard): nasm -f elf64 -l manager.lis -o manager.o manager.asm
    44                                  ;  Assemble (debug): nasm -f elf64 -gdwarf -l manage.lis -o manager.o manager.asm
    45                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    46                                  ;  Prototype of this function: extern double manager();
    47                                  ; 
    48                                  ;
    49                                  ;
    50                                  ;
    51                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    52                                  
    53                                  ;declarations
    54                                  
    55                                  %include "triangle.inc" ; Include macros
     1                              <1> ;Information: This include file was first created to accompany the program Huron's Triangles.
     2                              <1> ;This program calculates the area of a triangle using Heron's formula.
     3                              <1> 
     4                              <1> 
     5                              <1> 
     6                              <1> ;This is an include file for the program manager.asm.   File name: triangle.inc
     7                              <1> 
     8                              <1> 
     9                              <1> 
    10                              <1> %ifndef TRIANGLE_INC
    11                              <1> %define TRIANGLE_INC
    12                              <1> 
    13                              <1> ;===== Backup General-Purpose Registers (GPRs) ==========================================================
    14                              <1> 
    15                              <1> %macro backup_gprs 0
    16                              <1>     push rbp
    17                              <1>     mov rbp, rsp
    18                              <1>     push rbx
    19                              <1>     push rcx
    20                              <1>     push rdx
    21                              <1>     push rdi
    22                              <1>     push rsi
    23                              <1>     push r8
    24                              <1>     push r9
    25                              <1>     push r10
    26                              <1>     push r11
    27                              <1>     push r12
    28                              <1>     push r13
    29                              <1>     push r14
    30                              <1>     push r15
    31                              <1>     pushf
    32                              <1> %endmacro
    33                              <1> 
    34                              <1> ;===== Restore General-Purpose Registers (GPRs) ==========================================================
    35                              <1> 
    36                              <1> %macro restore_gprs 0
    37                              <1>     popf
    38                              <1>     pop r15
    39                              <1>     pop r14
    40                              <1>     pop r13
    41                              <1>     pop r12
    42                              <1>     pop r11
    43                              <1>     pop r10
    44                              <1>     pop r9
    45                              <1>     pop r8
    46                              <1>     pop rsi
    47                              <1>     pop rdi
    48                              <1>     pop rdx
    49                              <1>     pop rcx
    50                              <1>     pop rbx
    51                              <1>     pop rbp
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;===== Backup Floating-Point and SSE Registers ==========================================================
    55                              <1> 
    56                              <1> %macro backup_fpu 0
    57                              <1>     sub rsp, 16
    58                              <1>     movdqu [rsp], xmm6
    59                              <1>     sub rsp, 16
    60                              <1>     movdqu [rsp], xmm7
    61                              <1> %endmacro
    62                              <1> 
    63                              <1> ;===== Restore Floating-Point and SSE Registers ==========================================================
    64                              <1> 
    65                              <1> %macro restore_fpu 0
    66                              <1>     movdqu xmm7, [rsp]
    67                              <1>     add rsp, 16
    68                              <1>     movdqu xmm6, [rsp]
    69                              <1>     add rsp, 16
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> ;===== Display Personal Information ==========================================================
    73                              <1> 
    74                              <1> %macro display_info 0
    75                              <1>     segment .data
    76                              <1>     author_msg db 10, "This program is brought to you as a courtesy of", 10, 0
    77                              <1>     name_msg db "Author: Carlos Secas", 10, 0
    78                              <1>     cwid_msg db "CWID: 886088269", 10, 0
    79                              <1>     email_msg db "Email: carlosJsecas@csu.fullerton.edu", 10, 0
    80                              <1> 
    81                              <1>     segment .text
    82                              <1>     mov rdi, author_msg
    83                              <1>     call printf
    84                              <1>     mov rdi, name_msg
    85                              <1>     call printf
    86                              <1>     mov rdi, cwid_msg
    87                              <1>     call printf
    88                              <1>     mov rdi, email_msg
    89                              <1>     call printf
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %endif
    56                                  global manager
    57                                  extern isfloat
    58                                  extern istriangle
    59                                  extern huron
    60                                  extern printf 
    61                                  extern scanf
    62                                  extern atof
    63                                  
    64                                  
    65                                  
    66                                  segment .data ; intialized data here
    67 00000000 0A506C656173652065-     prompt_sides db 10, "Please enter the lengths of three sides of a triangle: ", 10,0
    67 00000009 6E7465722074686520-
    67 00000012 6C656E67746873206F-
    67 0000001B 662074687265652073-
    67 00000024 69646573206F662061-
    67 0000002D 20747269616E676C65-
    67 00000036 3A200A00           
    68 0000003A 0A4572726F7220696E-     invalid_input_msg db 10, "Error input try again.", 10,0
    68 00000043 707574207472792061-
    68 0000004C 6761696E2E0A00     
    69 00000053 0A5468616E6B20796F-     thank_you_msg db 10, "Thank you.", 10,0
    69 0000005C 752E0A00           
    70 00000060 0A546865736520696E-     valid_triange_msg db 10, "These inputs have been tested and they are sides of a valid triangle.", 10,0
    70 00000069 707574732068617665-
    70 00000072 206265656E20746573-
    70 0000007B 74656420616E642074-
    70 00000084 686579206172652073-
    70 0000008D 69646573206F662061-
    70 00000096 2076616C6964207472-
    70 0000009F 69616E676C652E0A00 
    71 000000A8 0A546865204875726F-     apply_huron_formula_msg db 10, "The Huron formula will be applied to find the area.", 10,0
    71 000000B1 6E20666F726D756C61-
    71 000000BA 2077696C6C20626520-
    71 000000C3 6170706C6965642074-
    71 000000CC 6F2066696E64207468-
    71 000000D5 6520617265612E0A00 
    72 000000DE 0A5468652061726561-     area_result_msg db 10, "The area is %lf sq units. This number will be returned to the caller module.", 10,0
    72 000000E7 20697320256C662073-
    72 000000F0 7120756E6974732E20-
    72 000000F9 54686973206E756D62-
    72 00000102 65722077696C6C2062-
    72 0000010B 652072657475726E65-
    72 00000114 6420746F2074686520-
    72 0000011D 63616C6C6572206D6F-
    72 00000126 64756C652E0A00     
    73 0000012D 0A546865736520696E-     invalid_triangle_msg db 10, "These inputs have been tested and they are not the sides of a valid triangle.", 10,0
    73 00000136 707574732068617665-
    73 0000013F 206265656E20746573-
    73 00000148 74656420616E642074-
    73 00000151 68657920617265206E-
    73 0000015A 6F7420746865207369-
    73 00000163 646573206F66206120-
    73 0000016C 76616C696420747269-
    73 00000175 616E676C652E0A00   
    74 0000017D 0A596F75206D617920-     rerun_msg db 10, "You may run this program again with the valid triangle numbers.", 10,0
    74 00000186 72756E207468697320-
    74 0000018F 70726F6772616D2061-
    74 00000198 6761696E2077697468-
    74 000001A1 207468652076616C69-
    74 000001AA 6420747269616E676C-
    74 000001B3 65206E756D62657273-
    74 000001BC 2E0A00             
    75 000001BF 257300                  str_format db "%s", 0
    76 000001C2 000000000000F0BF        neg_one dq -1.0
    77                                  
    78                                  
    79                                  segment .bss    ; Declare pointers to un-intialized space here
    80 00000000 <res 00000008>          side1 resq 1
    81 00000008 <res 00000008>          side2 resq 1
    82 00000010 <res 00000008>          side3 resq 1
    83 00000018 <res 00000040>          input_str resb 64
    84 00000058 <res 00000020>          num_buffer resb 32
    85 00000078 <res 00000008>          computed_area resq 1
    86                                  
    87                                  
    88                                  segment .text
    89                                  
    90                                  
    91                                  manager:
    92                                  
    93                                  backup_gprs ; Backup all GPR's
    93 00000000 55                  <1>  push rbp
    93 00000001 4889E5              <1>  mov rbp, rsp
    93 00000004 53                  <1>  push rbx
    93 00000005 51                  <1>  push rcx
    93 00000006 52                  <1>  push rdx
    93 00000007 57                  <1>  push rdi
    93 00000008 56                  <1>  push rsi
    93 00000009 4150                <1>  push r8
    93 0000000B 4151                <1>  push r9
    93 0000000D 4152                <1>  push r10
    93 0000000F 4153                <1>  push r11
    93 00000011 4154                <1>  push r12
    93 00000013 4155                <1>  push r13
    93 00000015 4156                <1>  push r14
    93 00000017 4157                <1>  push r15
    93 00000019 9C                  <1>  pushf
    94                                  backup_fpu ; Backup all FPR's
    94 0000001A 4883EC10            <1>  sub rsp, 16
    94 0000001E F30F7F3424          <1>  movdqu [rsp], xmm6
    94 00000023 4883EC10            <1>  sub rsp, 16
    94 00000027 F30F7F3C24          <1>  movdqu [rsp], xmm7
    95                                  display_info ; Print author details
    95                              <1>  segment .data
    95 000001CA 0A546869732070726F- <1>  author_msg db 10, "This program is brought to you as a courtesy of", 10, 0
    95 000001D3 6772616D2069732062- <1>
    95 000001DC 726F7567687420746F- <1>
    95 000001E5 20796F752061732061- <1>
    95 000001EE 20636F757274657379- <1>
    95 000001F7 206F660A00          <1>
    95 000001FC 417574686F723A2043- <1>  name_msg db "Author: Carlos Secas", 10, 0
    95 00000205 61726C6F7320536563- <1>
    95 0000020E 61730A00            <1>
    95 00000212 435749443A20383836- <1>  cwid_msg db "CWID: 886088269", 10, 0
    95 0000021B 3038383236390A00    <1>
    95 00000223 456D61696C3A206361- <1>  email_msg db "Email: carlosJsecas@csu.fullerton.edu", 10, 0
    95 0000022C 726C6F734A73656361- <1>
    95 00000235 73406373752E66756C- <1>
    95 0000023E 6C6572746F6E2E6564- <1>
    95 00000247 750A00              <1>
    95                              <1> 
    95                              <1>  segment .text
    95 0000002C 48BF-               <1>  mov rdi, author_msg
    95 0000002E [CA01000000000000]  <1>
    95 00000036 E8(00000000)        <1>  call printf
    95 0000003B 48BF-               <1>  mov rdi, name_msg
    95 0000003D [FC01000000000000]  <1>
    95 00000045 E8(00000000)        <1>  call printf
    95 0000004A 48BF-               <1>  mov rdi, cwid_msg
    95 0000004C [1202000000000000]  <1>
    95 00000054 E8(00000000)        <1>  call printf
    95 00000059 48BF-               <1>  mov rdi, email_msg
    95 0000005B [2302000000000000]  <1>
    95 00000063 E8(00000000)        <1>  call printf
    96                                  
    97                                  input_loop:
    98                                  ; Print prompt_sides for user input
    99 00000068 B800000000              mov rax, 0
   100 0000006D 48BF-                   mov rdi, prompt_sides
   100 0000006F [0000000000000000] 
   101 00000077 E8(00000000)            call printf
   102                                  
   103                                  ; Read first input as string
   104 0000007C B800000000              mov rax, 0
   105 00000081 48BF-                   mov rdi, str_format
   105 00000083 [BF01000000000000] 
   106 0000008B 48BE-                   mov rsi, input_str
   106 0000008D [1800000000000000] 
   107 00000095 E8(00000000)            call scanf
   108                                  
   109                                  ; Validate first input using isfloat
   110 0000009A 48BF-                   mov rdi, input_str ; Pass string address to isfloat
   110 0000009C [1800000000000000] 
   111 000000A4 E8(00000000)            call isfloat
   112 000000A9 4883F800                cmp rax, 0
   113 000000AD 0F84C4000000            jz invalid_input ; If invalid restart the process
   114                                  
   115                                  ; Convert to float using atof and store
   116 000000B3 48BF-                   mov rdi, input_str
   116 000000B5 [1800000000000000] 
   117 000000BD E8(00000000)            call atof
   118 000000C2 F20F110425-             movsd qword [side1], xmm0 ; atof returns result in xmm0
   118 000000C7 [00000000]         
   119                                  
   120                                  ; Read second input as string
   121 000000CB B800000000              mov rax, 0
   122 000000D0 48BF-                   mov rdi, str_format
   122 000000D2 [BF01000000000000] 
   123 000000DA 48BE-                   mov rsi, input_str
   123 000000DC [1800000000000000] 
   124 000000E4 E8(00000000)            call scanf
   125                                  
   126                                  ; Validate using isfloat
   127 000000E9 48BF-                   mov rdi, input_str
   127 000000EB [1800000000000000] 
   128 000000F3 E8(00000000)            call isfloat
   129 000000F8 4883F800                cmp rax, 0
   130 000000FC 7479                    jz invalid_input
   131                                  
   132                                  ; Convert the string to float using atof
   133 000000FE 48BF-                   mov rdi, input_str
   133 00000100 [1800000000000000] 
   134 00000108 E8(00000000)            call atof
   135 0000010D F20F110425-             movsd qword [side2], xmm0
   135 00000112 [08000000]         
   136                                  
   137                                  ; Read third input as string
   138 00000116 B800000000              mov rax, 0
   139 0000011B 48BF-                   mov rdi, str_format
   139 0000011D [BF01000000000000] 
   140 00000125 48BE-                   mov rsi, input_str
   140 00000127 [1800000000000000] 
   141 0000012F E8(00000000)            call scanf
   142                                  
   143                                  ; Validate the third input using isfloat
   144 00000134 48BF-                   mov rdi, input_str
   144 00000136 [1800000000000000] 
   145 0000013E E8(00000000)            call isfloat
   146 00000143 4883F800                cmp rax, 0
   147 00000147 742E                    jz invalid_input
   148                                  
   149                                  ; Convert the string to float using atof
   150 00000149 48BF-                   mov rdi, input_str
   150 0000014B [1800000000000000] 
   151 00000153 E8(00000000)            call atof
   152 00000158 F20F110425-             movsd qword [side3], xmm0
   152 0000015D [10000000]         
   153                                  
   154 00000161 B800000000              mov rax, 0
   155 00000166 48BF-                   mov rdi, thank_you_msg
   155 00000168 [5300000000000000] 
   156 00000170 E8(00000000)            call printf
   157                                  
   158                                  ; Continue the program
   159 00000175 EB19                    jmp continue_execution
   160                                  
   161                                  invalid_input:
   162 00000177 B800000000              mov rax, 0
   163 0000017C 48BF-                   mov rdi, invalid_input_msg
   163 0000017E [3A00000000000000] 
   164 00000186 E8(00000000)            call printf
   165 0000018B E9D8FEFFFF              jmp input_loop
   166                                  
   167                                  continue_execution:
   168                                  ; Call istriangle to validate if the sides form a triangle
   169 00000190 F20F100425-             movsd xmm0, [side1]
   169 00000195 [00000000]         
   170 00000199 F20F100C25-             movsd xmm1, [side2]
   170 0000019E [08000000]         
   171 000001A2 F20F101425-             movsd xmm2, [side3]
   171 000001A7 [10000000]         
   172 000001AB E8(00000000)            call istriangle
   173                                  
   174                                  ; If return value = 0 (invalid triangle)
   175 000001B0 4883F800                cmp rax, 0
   176 000001B4 0F8489000000            je handle_invalid_triangle ; Print message and return -1
   177                                  
   178                                  
   179                                  ; Print user that the triangle is valid
   180 000001BA B800000000              mov rax, 0
   181 000001BF 48BF-                   mov rdi, valid_triange_msg
   181 000001C1 [6000000000000000] 
   182 000001C9 E8(00000000)            call printf
   183                                  
   184                                  ; Compute area by using Huron
   185 000001CE F20F100425-             movsd xmm0, qword [side1]
   185 000001D3 [00000000]         
   186 000001D7 F20F100C25-             movsd xmm1, qword [side2]
   186 000001DC [08000000]         
   187 000001E0 F20F101425-             movsd xmm2, qword [side3]
   187 000001E5 [10000000]         
   188 000001E9 E8(00000000)            call huron 
   189                                  
   190                                  ; Store the computed area before calling printf
   191 000001EE F20F110425-             movsd qword [computed_area], xmm0
   191 000001F3 [78000000]         
   192                                  
   193                                  
   194                                  ; Print the area computed from Huron
   195 000001F7 B800000000              mov rax, 0
   196 000001FC 48BF-                   mov rdi, area_result_msg
   196 000001FE [DE00000000000000] 
   197 00000206 B801000000              mov rax, 1 ; 1 for the expected floating point #
   198 0000020B E8(00000000)            call printf
   199                                  
   200                                  ; Restore xmm0 after printf modifies registers
   201 00000210 F20F100425-             movsd xmm0, qword [computed_area]
   201 00000215 [78000000]         
   202                                  
   203                                  
   204                                  restore_fpu ; Restore FPR's
   204 00000219 F30F6F3C24          <1>  movdqu xmm7, [rsp]
   204 0000021E 4883C410            <1>  add rsp, 16
   204 00000222 F30F6F3424          <1>  movdqu xmm6, [rsp]
   204 00000227 4883C410            <1>  add rsp, 16
   205                                  restore_gprs ; Restore GPR's
   205 0000022B 9D                  <1>  popf
   205 0000022C 415F                <1>  pop r15
   205 0000022E 415E                <1>  pop r14
   205 00000230 415D                <1>  pop r13
   205 00000232 415C                <1>  pop r12
   205 00000234 415B                <1>  pop r11
   205 00000236 415A                <1>  pop r10
   205 00000238 4159                <1>  pop r9
   205 0000023A 4158                <1>  pop r8
   205 0000023C 5E                  <1>  pop rsi
   205 0000023D 5F                  <1>  pop rdi
   205 0000023E 5A                  <1>  pop rdx
   205 0000023F 59                  <1>  pop rcx
   205 00000240 5B                  <1>  pop rbx
   205 00000241 5D                  <1>  pop rbp
   206 00000242 C3                      ret
   207                                  
   208                                  handle_invalid_triangle:
   209                                  ; Print the invalid triangles msg
   210 00000243 B800000000              mov rax, 0
   211 00000248 48BF-                   mov rdi, invalid_triangle_msg
   211 0000024A [2D01000000000000] 
   212 00000252 E8(00000000)            call printf
   213                                  
   214                                  ; Print the re-run msg
   215 00000257 B800000000              mov rax, 0
   216 0000025C 48BF-                   mov rdi, rerun_msg
   216 0000025E [7D01000000000000] 
   217 00000266 E8(00000000)            call printf
   218                                  
   219 0000026B F20F100425-             movsd xmm0, qword [neg_one] ; Return -1 to show failure
   219 00000270 [C2010000]         
   220                                  
   221                                  restore_fpu ; Restore FPR's before returning
   221 00000274 F30F6F3C24          <1>  movdqu xmm7, [rsp]
   221 00000279 4883C410            <1>  add rsp, 16
   221 0000027D F30F6F3424          <1>  movdqu xmm6, [rsp]
   221 00000282 4883C410            <1>  add rsp, 16
   222                                  restore_gprs ; Restore GPR's before returning
   222 00000286 9D                  <1>  popf
   222 00000287 415F                <1>  pop r15
   222 00000289 415E                <1>  pop r14
   222 0000028B 415D                <1>  pop r13
   222 0000028D 415C                <1>  pop r12
   222 0000028F 415B                <1>  pop r11
   222 00000291 415A                <1>  pop r10
   222 00000293 4159                <1>  pop r9
   222 00000295 4158                <1>  pop r8
   222 00000297 5E                  <1>  pop rsi
   222 00000298 5F                  <1>  pop rdi
   222 00000299 5A                  <1>  pop rdx
   222 0000029A 59                  <1>  pop rcx
   222 0000029B 5B                  <1>  pop rbx
   222 0000029C 5D                  <1>  pop rbp
   223 0000029D C3                      ret
   224                                  ;End of the function manager ====================================================================
